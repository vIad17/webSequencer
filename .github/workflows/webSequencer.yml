name: Deploy static content to Pages

on:
  push:
    branches: ['main']
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      - name: Build
        run: npm run build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist  # замените на вашу папку с результатом сборки
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Новый job для деплоя на ваш сервер
  deploy-server:
    runs-on: ubuntu-latest
    needs: deploy-pages  # Запускается после успешного деплоя на Pages
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: GITHUB_REF_NAME,GITHUB_REPOSITORY
          script: |
            # Конфигурация проекта
            PROJECT_DIR="$HOME/WebSequencerApp"
            REPO="git@github.com:${GITHUB_REPOSITORY}.git"

            # Создаем/обновляем репозиторий
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "Cloning repository with branch ${GITHUB_REF_NAME}"
              git clone -b ${GITHUB_REF_NAME} "$REPO" "$PROJECT_DIR"
            else
              echo "Updating repository to branch ${GITHUB_REF_NAME}"
              cd "$PROJECT_DIR"
              git fetch origin
              git reset --hard origin/${GITHUB_REF_NAME}
            fi

            # Создаем сеть если не существует
            docker network ls | grep websequencer-net || docker network create websequencer-net

            # Перезапускаем
            cd "$PROJECT_DIR"
            docker compose down
            docker compose up -d --build